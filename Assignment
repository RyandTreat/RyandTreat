class BSTNode:
    def __init__(self, key, val, left=None, right=None, parent=None):
        self.key = key
        self.value = val
        self.left_child = left
        self.right_child = right
        self.parent = parent
        self.balance_factor = 0

    def __iter__(self):
        if self:
            if self.has_left_child():
                for elem in self.left_child:
                    yield elem
            yield self.key
            if self.has_right_child():
                for elem in self.right_child:
                    yield elem

    def has_left_child(self):
        return self.left_child

    def has_right_child(self):
        return self.right_child

    def is_left_child(self):
        return self.parent and self.parent.left_child == self

    def is_right_child(self):
        return self.parent and self.parent.right_child == self

    def is_root(self):
        return not self.parent

    def is_leaf(self):
        return not (self.right_child or self.left_child)

    def has_any_children(self):
        return self.right_child or self.left_child

    def has_both_children(self):
        return self.right_child and self.left_child

    def replace_node_data(self, key, value, lc, rc):
        self.key = key
        self.value = value
        self.left_child = lc
        self.right_child = rc
        if self.has_left_child():
            self.left_child.parent = self
        if self.has_right_child():
            self.right_child.parent = self

    def splice_out(self):
        if self.is_leaf():  # delete() case 1 (no children)
            if self.is_left_child():
                self.parent.left_child = None
            else:
                self.parent.right_child = None
        elif self.has_any_children():  # delete case 2 (exactly one child)
            if self.has_left_child():
                if self.is_left_child():
                    self.parent.left_child = self.left_child
                else:
                    self.parent.right_child = self.left_child
                self.left_child.parent = self.parent
            else:
                if self.is_left_child():
                    self.parent.left_child = self.right_child
                else:
                    self.parent.right_child = self.right_child
                self.right_child.parent = self.parent

    def find_successor(self):
        succ = None
        if self.has_right_child():
            succ = self.right_child.find_min()
        else:
            if self.parent:
                if self.is_left_child():
                    succ = self.parent
                else:
                    self.parent.right_child = None
                    succ = self.parent.find_successor()
                    self.parent.right_child = self
        return succ

    def find_min(self):
        current = self
        while current.has_left_child():
            current = current.left_child
        return current


class BinarySearchTree:
    def __init__(self):
        self.root = None
        self.size = 0

    def length(self):
        return self.size

    def __len__(self):
        return self.size

    def __iter__(self):
        return self.root.__iter__()

    def __setitem__(self, k, v):
        self.put(k, v)

    def __getitem__(self, key):
        return self.get(key)

    def __delitem__(self, key):
        self.delete(key)

    def __contains__(self, key):
        if self._get(key, self.root):
            return True
        else:
            return False

    def put(self, key, val):
        if self.root:
            self._put(key, val, self.root)
        else:
            self.root = BSTNode(key, val)
        self.size = self.size + 1

    def _put(self, key, val, current_node):
        if key == current_node.key:  # handle duplicates by updating value
            current_node.value = val
        elif key < current_node.key:
            if current_node.has_left_child():
                self._put(key, val, current_node.left_child)
            else:
                current_node.left_child = BSTNode(key, val, parent=current_node)
        else:
            if current_node.has_right_child():
                self._put(key, val, current_node.right_child)
            else:
                current_node.right_child = BSTNode(key, val, parent=current_node)

    def get(self, key):
        if self.root:
            res = self._get(key, self.root)
            if res:
                return res.value
            else:
                return None
        else:
            return None

    def _get(self, key, current_node):
        if not current_node:
            return None
        elif current_node.key == key:
            return current_node
        elif key < current_node.key:
            return self._get(key, current_node.left_child)
        else:
            return self._get(key, current_node.right_child)

    def delete(self, key):
        if self.size > 1:
            node_to_remove = self._get(key, self.root)
            if node_to_remove:
                self.remove(node_to_remove)
                self.size = self.size - 1
            else:
                raise KeyError('Error, key not in tree')
        elif self.size == 1 and self.root.key == key:
            self.root = None
            self.size = self.size - 1
        else:
            raise KeyError('Error, key not in tree')

    def remove(self, current_node):
        if current_node.is_leaf():  # leaf (case 1)
            if current_node == current_node.parent.left_child:
                current_node.parent.left_child = None
            else:
                current_node.parent.right_child = None
        elif current_node.has_both_children():  # interior (case 3)
            succ = current_node.find_successor()
            succ.splice_out()
            current_node.key = succ.key
            current_node.value = succ.value
        else:  # this node has one child (case 2)
            if current_node.has_left_child():
                if current_node.is_left_child():
                    current_node.left_child.parent = current_node.parent
                    current_node.parent.left_child = current_node.left_child
                elif current_node.is_right_child():
                    current_node.left_child.parent = current_node.parent
                    current_node.parent.right_child = current_node.left_child
                else:
                    current_node.replace_node_data(current_node.left_child.key,
                                                   current_node.left_child.value,
                                                   current_node.left_child.left_child,
                                                   current_node.left_child.right_child)
            else:
                if current_node.is_left_child():
                    current_node.right_child.parent = current_node.parent
                    current_node.parent.left_child = current_node.right_child
                elif current_node.is_right_child():
                    current_node.right_child.parent = current_node.parent
                    current_node.parent.right_child = current_node.right_child
                else:
                    current_node.replace_node_data(current_node.right_child.key,
                                                   current_node.right_child.value,
                                                   current_node.right_child.left_child,
                                                   current_node.right_child.right_child)


class AVLTree(BinarySearchTree):

    def __init__(self):
        super(AVLTree, self).__init__()

    def _put(self, key, val, current_node):
        if key == current_node.key:  # handle duplicates by updating value
            current_node.value = val
        elif key < current_node.key:
            if current_node.has_left_child():
                self._put(key, val, current_node.left_child)
            else:
                current_node.left_child = BSTNode(key, val, parent=current_node)
                self.update_balance(current_node.left_child)
        else:
            if current_node.has_right_child():
                self._put(key, val, current_node.right_child)
            else:
                current_node.right_child = BSTNode(key, val, parent=current_node)
                self.update_balance(current_node.right_child)

    def update_balance(self, node):
        if node.balance_factor > 1 or node.balance_factor < -1:
            # identified a violation, rebalance this subtree
            self.rebalance(node)
            return
        if node.parent != None:  # this is not the root node
            if node.is_left_child():
                node.parent.balance_factor += 1
            elif node.is_right_child():
                node.parent.balance_factor -= 1

            if node.parent.balance_factor != 0:
                # locate the deepest node with the height imbalance
                self.update_balance(node.parent)

    def update_balance_delete(self, node):
        if node has parent:
            update parents balance factor

            if node.balance_factor > 1 or node.balance_factor < -1:
                self.rebalance(node)
                self.update_balance_delete(node.parent)
        elif node.parent.balance_factor != 0:
            return
        else:
            self.update_balance_delete(node.parent)

    def rebalance(self, node):
        # locate which part of the subtree caused the imbalance
        if node.balance_factor < 0:
            if node.right_child.balance_factor > 0:
                # CASE 3
                self.rotate_right(node.right_child)
                self.rotate_left(node)
            else:
                # CASE 4
                self.rotate_left(node)
        elif node.balance_factor > 0:
            if node.left_child.balance_factor < 0:
                # CASE 2
                self.rotate_left(node.left_child)
                self.rotate_right(node)
            else:
                # CASE 1
                self.rotate_right(node)

    def rotate_left(self, rot_root):
        new_root = rot_root.right_child
        rot_root.right_child = new_root.left_child
        if new_root.left_child != None:
            new_root.left_child.parent = rot_root
        new_root.parent = rot_root.parent
        if rot_root.is_root():
            self.root = new_root
        else:
            if rot_root.is_left_child():
                rot_root.parent.left_child = new_root
            else:
                rot_root.parent.right_child = new_root
        new_root.left_child = rot_root
        rot_root.parent = new_root
        rot_root.balance_factor = rot_root.balance_factor + 1 - min(new_root.balance_factor, 0)
        new_root.balance_factor = new_root.balance_factor + 1 + max(rot_root.balance_factor, 0)

    def rotate_right(self, rot_root):
        new_root = rot_root.left_child
        rot_root.left_child = new_root.right_child
        if new_root.right_child != None:
            new_root.right_child.parent = rot_root
        new_root.parent = rot_root.parent
        if rot_root.is_root():
            self.root = new_root
        else:
            if rot_root.is_right_child():
                rot_root.parent.right_child = new_root
            else:
                rot_root.parent.left_child = new_root
        new_root.right_child = rot_root
        rot_root.parent = new_root
        rot_root.balance_factor = rot_root.balance_factor - 1 - max(new_root.balance_factor, 0)
        new_root.balance_factor = new_root.balance_factor - 1 + min(rot_root.balance_factor, 0)

    def in_order_traversal(self):
        if self.size > 0:
            self.in_order_helper(self.root)
            print()
        else:
            print("Empty tree")

    def in_order_helper(self, current_node):
        if current_node is not None:
            self.in_order_helper(current_node.left_child)
            print(str(current_node.key) + ":" + str(current_node.value) + "(%d)" % current_node.balance_factor, end=" ")
            self.in_order_helper(current_node.right_child)

    def level_order_traversal(self):
        if self.size > 0:
            queue = ["{" + str(self.root.key) + ":" + str(self.root.value) + "(%d)" % self.root.balance_factor + "}",
                     "\n"]
            self.level_order_helper(self.root, queue)
            for data in queue:
                print(data, end="")
            print()
        else:
            print("{}")

    def level_order_helper(self, node, queue):
        if node is not None:
            if node.left_child is not None:
                temp = node.left_child
                queue.append("{" + str(temp.key) + ":" + str(temp.value) + "(%d)" % temp.balance_factor + "}")
            if node.right_child is not None:
                temp = node.right_child
                queue.append("{" + str(temp.key) + ":" + str(temp.value) + "(%d)" % temp.balance_factor + "}")
            queue.append("\n")
            self.level_order_helper(node.left_child, queue)
            self.level_order_helper(node.right_child, queue)



if __name__ == '__main__':
    mytree = AVLTree()
    mytree[9] = "CptS_450"
    mytree[8] = "CptS_415"
    mytree[7] = "CptS_315"
    mytree[6] = "CptS_215"
    mytree[5] = "CptS_132"
    mytree[4] = "CptS_131"
    mytree[3] = "CptS_122"
    mytree[2] = "CptS_121"
    mytree[1] = "CptS_115"
    mytree.level_order_traversal()

    mytree.delete(5)
    mytree.delete(6)
    mytree.level_order_traversal()
